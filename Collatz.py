#!/usr/bin/env python3

# ----------------------------------
# projects/python/collatz/Collatz.py
# Copyright (C) 2017
# Glenn P. Downing
# ----------------------------------

from io import StringIO
import random as rand

# import cProfile
# ------------
# collatz_read
# ------------
def collatz_read(s):
    """
    read two ints
    s a string
    return a list of two ints, representing the beginning and end of a range, [i, j]
    """
    a = s.split()
    return [int(a[0]), int(a[1])]

# ------------
# collatz_eval
# ------------

def collatz_eval(i, j):
    """
    i the beginning of the range, inclusive
    j the end       of the range, inclusive
    return the max cycle length of the range [i, j]
    """

    # metaCache such that the key refers to the start of an interval with length 1000
    # the value for the key is the max cycle length in that section
    metaCache = {1: 179, 1001: 182, 2001: 217, 3001: 238, 4001: 215, 5001: 236, 6001: 262, 7001: 252, 8001: 247, 9001: 260, 10001: 268, 11001: 250, 12001: 263, 13001: 276, 14001: 271, 15001: 271, 16001: 266, 17001: 279, 18001: 261, 19001: 274, 20001: 256, 21001: 269, 22001: 269, 23001: 282, 24001: 264, 25001: 264, 26001: 308, 27001: 259, 28001: 259, 29001: 272, 30001: 272, 31001: 285, 32001: 267, 33001: 267, 34001: 311, 35001: 324, 36001: 249, 37001: 306, 38001: 244, 39001: 306, 40001: 288, 41001: 257, 42001: 288, 43001: 270, 44001: 270, 45001: 314, 46001: 283, 47001: 314, 48001: 296, 49001: 296, 50001: 278, 51001: 309, 52001: 340, 53001: 322, 54001: 260, 55001: 260, 56001: 322, 57001: 304, 58001: 273, 59001: 304, 60001: 335, 61001: 317, 62001: 286, 63001: 330, 64001: 299, 65001: 268, 66001: 268, 67001: 312, 68001: 312, 69001: 299, 70001: 312, 71001: 325, 72001: 263, 73001: 294, 74001: 325, 75001: 307, 76001: 307, 77001: 351, 78001: 338, 79001: 307, 80001: 320, 81001: 320, 82001: 320, 83001: 289, 84001: 320, 85001: 302, 86001: 302, 87001: 333, 88001: 333, 89001: 315, 90001: 315, 91001: 333, 92001: 315, 93001: 284, 94001: 315, 95001: 328, 96001: 297, 97001: 297, 98001: 284, 99001: 328, 100001: 341, 101001: 310, 102001: 310, 103001: 248, 104001: 310, 105001: 341, 106001: 354, 107001: 292, 108001: 279, 109001: 310, 110001: 292, 111001: 323, 112001: 323, 113001: 292, 114001: 305, 115001: 349, 116001: 305, 117001: 305, 118001: 336, 119001: 305, 120001: 318, 121001: 336, 122001: 318, 123001: 331, 124001: 287, 125001: 318, 126001: 331, 127001: 287, 128001: 331, 129001: 344, 130001: 331, 131001: 300, 132001: 331, 133001: 313, 134001: 300, 135001: 344, 136001: 313, 137001: 331, 138001: 313, 139001: 313, 140001: 344, 141001: 326, 142001: 375, 143001: 282, 144001: 326, 145001: 295, 146001: 357, 147001: 295, 148001: 326, 149001: 326, 150001: 370, 151001: 295, 152001: 308, 153001: 308, 154001: 352, 155001: 308, 156001: 383, 157001: 339, 158001: 321, 159001: 352, 160001: 370, 161001: 290, 162001: 339, 163001: 321, 164001: 334, 165001: 321, 166001: 352, 167001: 321, 168001: 321, 169001: 334, 170001: 290, 171001: 334, 172001: 303, 173001: 347, 174001: 334, 175001: 272, 176001: 334, 177001: 334, 178001: 347, 179001: 303, 180001: 365, 181001: 316, 182001: 334, 183001: 254, 184001: 316, 185001: 329, 186001: 347, 187001: 329, 188001: 316, 189001: 360, 190001: 329, 191001: 329, 192001: 347, 193001: 329, 194001: 342, 195001: 360, 196001: 298, 197001: 285, 198001: 329, 199001: 329, 200001: 342, 201001: 311, 202001: 342, 203001: 311, 204001: 311, 205001: 355, 206001: 373, 207001: 311, 208001: 311, 209001: 311, 210001: 342, 211001: 355, 212001: 355, 213001: 373, 214001: 293, 215001: 280, 216001: 386, 217001: 324, 218001: 324, 219001: 355, 220001: 324, 221001: 355, 222001: 324, 223001: 324, 224001: 324, 225001: 368, 226001: 368, 227001: 306, 228001: 355, 229001: 306, 230001: 443, 231001: 350, 232001: 337, 233001: 368, 234001: 381, 235001: 306, 236001: 337, 237001: 350, 238001: 306, 239001: 350, 240001: 368, 241001: 275, 242001: 319, 243001: 337, 244001: 275, 245001: 319, 246001: 332, 247001: 350, 248001: 288, 249001: 350, 250001: 332, 251001: 319, 252001: 319, 253001: 332, 254001: 363, 255001: 288, 256001: 332, 257001: 345, 258001: 301, 259001: 345, 260001: 332, 261001: 332, 262001: 301, 263001: 407, 264001: 332, 265001: 332, 266001: 314, 267001: 345, 268001: 270, 269001: 345, 270001: 407, 271001: 283, 272001: 314, 273001: 358, 274001: 332, 275001: 345, 276001: 314, 277001: 389, 278001: 345, 279001: 314, 280001: 345, 281001: 358, 282001: 314, 283001: 358, 284001: 358, 285001: 376, 286001: 314, 287001: 327, 288001: 389, 289001: 345, 290001: 327, 291001: 327, 292001: 340, 293001: 358, 294001: 296, 295001: 358, 296001: 327, 297001: 327, 298001: 371, 299001: 327, 300001: 371, 301001: 296, 302001: 340, 303001: 340, 304001: 340, 305001: 265, 306001: 309, 307001: 309, 308001: 371, 309001: 340, 310001: 371, 311001: 309, 312001: 384, 313001: 340, 314001: 278, 315001: 340, 316001: 353, 317001: 309, 318001: 353, 319001: 322, 320001: 371, 321001: 353, 322001: 309, 323001: 322, 324001: 384, 325001: 340, 326001: 247, 327001: 322, 328001: 291, 329001: 353, 330001: 322, 331001: 291, 332001: 353, 333001: 335, 334001: 322, 335001: 322, 336001: 366, 337001: 366, 338001: 335, 339001: 366, 340001: 304, 341001: 335, 342001: 353, 343001: 335, 344001: 304, 345001: 441, 346001: 348, 347001: 322, 348001: 335, 349001: 366, 350001: 304, 351001: 379, 352001: 335, 353001: 304, 354001: 348, 355001: 379, 356001: 348, 357001: 304, 358001: 379, 359001: 348, 360001: 410, 361001: 348, 362001: 361, 363001: 317, 364001: 317, 365001: 361, 366001: 348, 367001: 286, 368001: 317, 369001: 361, 370001: 392, 371001: 348, 372001: 317, 373001: 348, 374001: 330, 375001: 361, 376001: 423, 377001: 361, 378001: 330, 379001: 361, 380001: 379, 381001: 374, 382001: 361, 383001: 330, 384001: 330, 385001: 348, 386001: 330, 387001: 299, 388001: 330, 389001: 436, 390001: 361, 391001: 330, 392001: 299, 393001: 361, 394001: 405, 395001: 312, 396001: 330, 397001: 330, 398001: 374, 399001: 299, 400001: 374, 401001: 387, 402001: 268, 403001: 343, 404001: 343, 405001: 405, 406001: 361, 407001: 268, 408001: 312, 409001: 312, 410001: 449, 411001: 330, 412001: 343, 413001: 374, 414001: 374, 415001: 312, 416001: 387, 417001: 343, 418001: 343, 419001: 281, 420001: 343, 421001: 325, 422001: 356, 423001: 418, 424001: 356, 425001: 356, 426001: 356, 427001: 374, 428001: 294, 429001: 281, 430001: 312, 431001: 343, 432001: 387, 433001: 343, 434001: 356, 435001: 281, 436001: 325, 437001: 387, 438001: 400, 439001: 356, 440001: 325, 441001: 294, 442001: 356, 443001: 338, 444001: 325, 445001: 338, 446001: 325, 447001: 325, 448001: 369, 449001: 369, 450001: 387, 451001: 307, 452001: 294, 453001: 369, 454001: 338, 455001: 338, 456001: 356, 457001: 338, 458001: 307, 459001: 307, 460001: 307, 461001: 444, 462001: 369, 463001: 325, 464001: 338, 465001: 369, 466001: 369, 467001: 413, 468001: 382, 469001: 338, 470001: 307, 471001: 276, 472001: 338, 473001: 307, 474001: 382, 475001: 320, 476001: 307, 477001: 382, 478001: 351, 479001: 351, 480001: 413, 481001: 382, 482001: 351, 483001: 307, 484001: 320, 485001: 338, 486001: 382, 487001: 382, 488001: 382, 489001: 351, 490001: 320, 491001: 320, 492001: 426, 493001: 395, 494001: 351, 495001: 320, 496001: 320, 497001: 289, 498001: 351, 499001: 395, 500001: 364, 501001: 320, 502001: 426, 503001: 320, 504001: 364, 505001: 364, 506001: 382, 507001: 364, 508001: 377, 509001: 364, 510001: 333, 511001: 470, 512001: 333, 513001: 351, 514001: 364, 515001: 395, 516001: 302, 517001: 333, 518001: 439, 519001: 364, 520001: 333, 521001: 364, 522001: 333, 523001: 302, 524001: 364, 525001: 408, 526001: 408, 527001: 377, 528001: 377, 529001: 333, 530001: 346, 531001: 346, 532001: 377, 533001: 377, 534001: 346, 535001: 302, 536001: 333, 537001: 377, 538001: 346, 539001: 346, 540001: 408, 541001: 364, 542001: 346, 543001: 359, 544001: 315, 545001: 346, 546001: 452, 547001: 377, 548001: 333, 549001: 315, 550001: 346, 551001: 377, 552001: 315, 553001: 346, 554001: 421, 555001: 390, 556001: 346, 557001: 315, 558001: 315, 559001: 284, 560001: 359, 561001: 328, 562001: 359, 563001: 328, 564001: 421, 565001: 328, 566001: 359, 567001: 359, 568001: 359, 569001: 359, 570001: 377, 571001: 359, 572001: 372, 573001: 359, 574001: 328, 575001: 346, 576001: 390, 577001: 390, 578001: 346, 579001: 359, 580001: 266, 581001: 328, 582001: 328, 583001: 434, 584001: 372, 585001: 359, 586001: 359, 587001: 328, 588001: 315, 589001: 297, 590001: 359, 591001: 403, 592001: 328, 593001: 328, 594001: 328, 595001: 328, 596001: 372, 597001: 372, 598001: 341, 599001: 372, 600001: 372, 601001: 403, 602001: 297, 603001: 297, 604001: 372, 605001: 341, 606001: 328, 607001: 341, 608001: 403, 609001: 359, 610001: 341, 611001: 354, 612001: 310, 613001: 310, 614001: 310, 615001: 447, 616001: 372, 617001: 372, 618001: 310, 619001: 341, 620001: 372, 621001: 372, 622001: 310, 623001: 354, 624001: 385, 625001: 354, 626001: 509, 627001: 341, 628001: 279, 629001: 279, 630001: 341, 631001: 310, 632001: 385, 633001: 354, 634001: 310, 635001: 416, 636001: 310, 637001: 354, 638001: 354, 639001: 354, 640001: 416, 641001: 372, 642001: 416, 643001: 279, 644001: 279, 645001: 310, 646001: 323, 647001: 341, 648001: 323, 649001: 385, 650001: 341, 651001: 336, 652001: 354, 653001: 385, 654001: 323, 655001: 385, 656001: 429, 657001: 354, 658001: 398, 659001: 354, 660001: 323, 661001: 323, 662001: 292, 663001: 292, 664001: 367, 665001: 442, 666001: 323, 667001: 367, 668001: 323, 669001: 336, 670001: 323, 671001: 323, 672001: 367, 673001: 336, 674001: 367, 675001: 385, 676001: 336, 677001: 336, 678001: 380, 679001: 367, 680001: 336, 681001: 336, 682001: 305, 683001: 380, 684001: 336, 685001: 354, 686001: 398, 687001: 380, 688001: 292, 689001: 336, 690001: 336, 691001: 442, 692001: 323, 693001: 367, 694001: 367, 695001: 336, 696001: 336, 697001: 318, 698001: 367, 699001: 367, 700001: 367, 701001: 411, 702001: 380, 703001: 349, 704001: 504, 705001: 380, 706001: 305, 707001: 349, 708001: 349, 709001: 336, 710001: 380, 711001: 380, 712001: 411, 713001: 380, 714001: 305, 715001: 305, 716001: 380, 717001: 349, 718001: 336, 719001: 349, 720001: 411, 721001: 367, 722001: 411, 723001: 349, 724001: 362, 725001: 305, 726001: 349, 727001: 318, 728001: 362, 729001: 318, 730001: 380, 731001: 336, 732001: 380, 733001: 349, 734001: 349, 735001: 424, 736001: 318, 737001: 380, 738001: 424, 739001: 424, 740001: 393, 741001: 318, 742001: 349, 743001: 318, 744001: 318, 745001: 349, 746001: 287, 747001: 362, 748001: 318, 749001: 393, 750001: 362, 751001: 331, 752001: 318, 753001: 424, 754001: 318, 755001: 362, 756001: 362, 757001: 331, 758001: 362, 759001: 362, 760001: 380, 761001: 362, 762001: 331, 763001: 375, 764001: 362, 765001: 331, 766001: 331, 767001: 468, 768001: 331, 769001: 393, 770001: 349, 771001: 344, 772001: 393, 773001: 362, 774001: 331, 775001: 437, 776001: 331, 777001: 393, 778001: 437, 779001: 362, 780001: 344, 781001: 362, 782001: 331, 783001: 331, 784001: 313, 785001: 375, 786001: 300, 787001: 362, 788001: 406, 789001: 406, 790001: 375, 791001: 344, 792001: 437, 793001: 375, 794001: 331, 795001: 331, 796001: 468, 797001: 344, 798001: 300, 799001: 375, 800001: 375, 801001: 406, 802001: 388, 803001: 300, 804001: 331, 805001: 375, 806001: 344, 807001: 406, 808001: 331, 809001: 344, 810001: 406, 811001: 287, 812001: 362, 813001: 375, 814001: 313, 815001: 357, 816001: 344, 817001: 344, 818001: 450, 819001: 357, 820001: 450, 821001: 375, 822001: 344, 823001: 375, 824001: 326, 825001: 344, 826001: 313, 827001: 419, 828001: 313, 829001: 375, 830001: 344, 831001: 419, 832001: 388, 833001: 357, 834001: 344, 835001: 313, 836001: 344, 837001: 525, 838001: 344, 839001: 388, 840001: 357, 841001: 313, 842001: 388, 843001: 331, 844001: 357, 845001: 401, 846001: 313, 847001: 419, 848001: 313, 849001: 357, 850001: 357, 851001: 357, 852001: 326, 853001: 357, 854001: 419, 855001: 388, 856001: 375, 857001: 357, 858001: 370, 859001: 313, 860001: 357, 861001: 326, 862001: 326, 863001: 344, 864001: 326, 865001: 388, 866001: 326, 867001: 344, 868001: 357, 869001: 388, 870001: 326, 871001: 432, 872001: 326, 873001: 326, 874001: 388, 875001: 432, 876001: 370, 877001: 401, 878001: 326, 879001: 357, 880001: 326, 881001: 326, 882001: 313, 883001: 370, 884001: 295, 885001: 370, 886001: 445, 887001: 401, 888001: 295, 889001: 370, 890001: 339, 891001: 326, 892001: 295, 893001: 326, 894001: 370, 895001: 326, 896001: 370, 897001: 339, 898001: 370, 899001: 295, 900001: 401, 901001: 401, 902001: 383, 903001: 295, 904001: 383, 905001: 295, 906001: 445, 907001: 326, 908001: 370, 909001: 326, 910001: 476, 911001: 383, 912001: 401, 913001: 357, 914001: 370, 915001: 339, 916001: 339, 917001: 383, 918001: 339, 919001: 432, 920001: 339, 921001: 339, 922001: 445, 923001: 308, 924001: 370, 925001: 339, 926001: 370, 927001: 476, 928001: 383, 929001: 339, 930001: 370, 931001: 308, 932001: 370, 933001: 370, 934001: 414, 935001: 414, 936001: 383, 937001: 352, 938001: 445, 939001: 507, 940001: 383, 941001: 339, 942001: 339, 943001: 352, 944001: 383, 945001: 352, 946001: 383, 947001: 383, 948001: 383, 949001: 352, 950001: 414, 951001: 383, 952001: 414, 953001: 414, 954001: 383, 955001: 339, 956001: 352, 957001: 352, 958001: 321, 959001: 352, 960001: 414, 961001: 352, 962001: 383, 963001: 414, 964001: 352, 965001: 321, 966001: 365, 967001: 308, 968001: 321, 969001: 352, 970001: 458, 971001: 352, 972001: 321, 973001: 383, 974001: 383, 975001: 339, 976001: 383, 977001: 334, 978001: 383, 979001: 334, 980001: 427, 981001: 321, 982001: 383, 983001: 383, 984001: 352, 985001: 427, 986001: 352, 987001: 396, 988001: 321, 989001: 352, 990001: 321, 991001: 321, 992001: 352, 993001: 290, 994001: 365, 995001: 365, 996001: 365, 997001: 440, 998001: 396, 999001: 396}
    cycleLengthDict = {1 : 1}
    maxCycleLength = 0

    # I forgot the actual condition to reduce the interval.  
    # this works though.
    while i*2 <= j:
        i += 1

    num = i
    # Using a while loop rather than a for loop through the values so that 
    # I can skip many indices at once
    while num <= j:
        #initialization of the cycle length and the list of the cycle
        n = num
        cycleLength = 1
        cycle = []

        # This will activate and skip any intervals that are within the cache
        # It is important to calculate anything below and above the cached intervals
        if num in metaCache:
            while j-num>=1000:
                if metaCache[num] > maxCycleLength:
                    maxCycleLength = metaCache[num]
                num += 1000
                # this line lets us continue on and calculate the cycle length if 
                # the loop moves the iterator forward.  If I used continue it would infinite loop
                n=num

        while True:
            cycle.append(n)
            # the dictionary starts with the cycle length of 1. So this loop continues
            # until it hits something in the dictionary.  
            if n in cycleLengthDict:
                cycleLength += cycleLengthDict[n] - 1
                break
            cycleLength += 1
            if n%2 == 0:
                n /= 2
            else:
                n = 3*n + 1


        # needs to be this way rather than using the max value in the dictionary
        # to account for the possibility that the max came from the meta cache
        if cycleLength > maxCycleLength:
            maxCycleLength = cycleLength


        # Here I add everything that is in the cycle to the dictionary
        # Lazy Cache.
        for i in range(0, len(cycle)):
            if cycle[i] not in cycleLengthDict:
                cycleLengthDict[cycle[i]] = cycleLength
            cycleLength -= 1   

        num += 1     

    return maxCycleLength


# -------------
# collatz_print
# -------------

def collatz_print(w, i, j, v):
    """
    print three ints
    w a writer
    i the beginning of the range, inclusive
    j the end       of the range, inclusive
    v the max cycle length
    """
    w.write(str(i) + " " + str(j) + " " + str(v) + "\n")
    # w.write(str(i) + ": " + str(v) + ", ")

# -------------
# collatz_solve
# -------------

def collatz_solve(r, w):
    """
    r a reader
    w a writer
    """
    # dict = {1 : 1}
    # collatz_eval(1,1000000,dict)
    for s in r:
        i, j = collatz_read(s)
        v = collatz_eval(min(i,j), max(i,j)) #Choose max and min of pairs to ensure order
        collatz_print(w, i, j, v)

import sys
if __name__ == "__main__":
        # r = StringIO("1 100\n100 2000\n201 2100\n900 10000\n")
        # w = StringIO()
        # collatz_solve(r, sys.stdout)
    collatz_solve(sys.stdin, sys.stdout)

    # a = 1
    # b = 1

    # while a == b:
    #     lower = rand.randint(2,100000)
    #     upper = rand.randint(lower,100000)
    #     a = collatz_eval(lower,upper)
    #     b = collatz_eval_1(lower,upper)
    #     print("range: (", lower , ",", upper,") verision 1 got", a, "version 2 got", b)

